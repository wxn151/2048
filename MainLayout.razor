@inherits LayoutComponentBase
@inject IJSRuntime JS
@using Game2048.GameLogic
@using Microsoft.AspNetCore.Components.Web

@code {
    private GameService game = new();
    private int BestScore = 0;

    protected override async Task OnInitializedAsync()
    {
        var saved = await JS.InvokeAsync<string>("localStorage.getItem", "bestScore");
        int.TryParse(saved, out BestScore);
        game.StartNewGame();
    }

    private async Task Move(string dir)
    {
        if (game.Move(dir) && game.Score > BestScore)
        {
            BestScore = game.Score;
            await JS.InvokeVoidAsync("localStorage.setItem", "bestScore", BestScore.ToString());
        }
        StateHasChanged();
    }

    private string TileClass(int val) =>
        val == 0 ? "tile empty" : $"tile tile-{val}";

    private async Task OnKey(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowUp": await Move("up"); break;
            case "ArrowDown": await Move("down"); break;
            case "ArrowLeft": await Move("left"); break;
            case "ArrowRight": await Move("right"); break;
        }
    }

    private void Reset()
    {
        game.StartNewGame();
        StateHasChanged();
    }
}

<div tabindex="0" @onkeydown="OnKey" class="game-container">
    <h2>2048 Game</h2>
    <p>Score: @game.Score | Best: @BestScore</p>

    @if (game.HasWon)
    {
        <p class="win">ðŸŽ‰ You reached 2048!</p>
    }

    <div class="board">
        @for (int i = 0; i < 4; i++)
        {
            <div class="row">
                @for (int j = 0; j < 4; j++)
                {
                    <div class="@TileClass(game.Board[i, j])">
                        @(game.Board[i, j] == 0 ? "" : game.Board[i, j])
                    </div>
                }
            </div>
        }
    </div>

    <button class="reset-button" @onclick="Reset">Reset Game</button>
</div>
